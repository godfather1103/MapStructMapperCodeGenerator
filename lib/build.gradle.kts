/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    signing
    `maven-publish`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.3")
    implementation("org.mapstruct:mapstruct:1.5.5.Final")
}

group = "${property("group")}"
version = "${property("version")}"
description = "${property("lib.description")}"

// Apply a specific Java toolchain to ease working on different environments.
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
}

publishing {
    repositories {
        maven {
            val releasesRepoUrl = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            val snapshotsRepoUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            url = if (version.toString().uppercase().contains("SNAPSHOT")) snapshotsRepoUrl else releasesRepoUrl
            credentials {
                project.findProperty("ossrhUsername")?.let {
                    username = it as String
                }
                project.findProperty("ossrhPassword")?.let {
                    password = it as String
                }
            }
        }
    }
    publications.create<MavenPublication>("mavenJava") {
        from(components["java"])
        pom {
            url.set("https://github.com/godfather1103/MapStructMapperCodeGenerator")
            artifactId = project.description
            name.set(project.description)
            description.set("MapStruct code generator")
            scm {
                url.set("https://github.com/godfather1103/MapStructMapperCodeGenerator")
                connection.set("scm:git:https://github.com/godfather1103/MapStructMapperCodeGenerator.git")
                developerConnection.set("scm:git:https://github.com/godfather1103/MapStructMapperCodeGenerator.git")
            }

            licenses {
                license {
                    name.set("MIT License")
                    url.set("https://opensource.org/license/mit/")
                    distribution.set("repo")
                }
            }

            developers {
                developer {
                    id.set("godfather1103")
                    name.set("Jack Chu")
                    email.set("chuchuanbao@gmail.com")
                }
            }
        }

    }
}

signing {
    sign(publishing.publications["mavenJava"])
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc> {
    options.encoding = "UTF-8"
    (options as StandardJavadocDocletOptions).tags = listOf("date")
}
